name: K8 Cluster Setup

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: "Terraform Setup"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install jq

      - name: Install doctl
        run: |
          cd ~
          wget https://github.com/digitalocean/doctl/releases/download/v1.90.0/doctl-1.90.0-linux-amd64.tar.gz
          tar xf ~/doctl-1.90.0-linux-amd64.tar.gz
          sudo mv ~/doctl /usr/local/bin
          doctl version
          doctl auth init -t ${{ secrets.DO_PAT }}
          doctl account get
          
      - name: SSH setup
        run: |
          sudo mkdir -p /home/runner/.ssh
          sudo chmod 777 /home/runner/.ssh
          sudo touch /home/runner/.ssh/do_key_01
          sudo touch /home/runner/.ssh/do_key_01.pub
          sudo chmod 777 /home/runner/.ssh/do_key_01
          sudo chmod 777 /home/runner/.ssh/do_key_01.pub
          sudo echo "${{ secrets.DO_KEY_01 }}" > /home/runner/.ssh/do_key_01
          sudo echo "${{ secrets.DO_KEY_01_PUB }}" > /home/runner/.ssh/do_key_01.pub

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      # - name: Terraform Format
      #   id: fmt
      #   run: cd terraform && terraform fmt -check

      - name: Terraform Init
        id: init
        run: cd terraform && rm -fr .terraform && rm -fr .terraform.lock.hcl && terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: cd terraform && terraform plan -var "do_token=${{ secrets.DO_PAT }}" -var "pvt_key=/home/runner/.ssh/do_key_01" -var "pub_key=/home/runner/.ssh/do_key_01.pub"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: cd terraform && terraform apply -auto-approve -var "do_token=${{ secrets.DO_PAT }}" -var "pvt_key=/home/runner/.ssh/do_key_01" -var "pub_key=/home/runner/.ssh/do_key_01.pub"

      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: exit 1

      - name: Retrieve cluster id
        id: doctl
        run: |
          if test -f "./outputs.json"; then 
            rm ./outputs.json
          fi && \
          if test -f "./ws.json"; then 
            rm ./ws.json
          fi && \
          if test -f "./clusterid.txt"; then 
            rm ./clusterid.txt
          fi && \
          cd terraform && terraform output | grep -Eo '\w{1,}-\w{1,}-\w{1,}-\w{1,}-\w{1,}' > ./clusterid.txt && \
          export CLUSTER_ID=$(cat ./clusterid.txt) && \
          echo $CLUSTER_ID && \
          echo "XXX" && \
          cat ./cluster.txt

    # doctl kubernetes cluster kubeconfig save $CLUSTER_ID && \
    # curl --header "Authorization: Bearer ${{ secrets.TF_TOKEN }}" --header "Content-Type: application/vnd.api+json" "https://app.terraform.io/api/v2/organizations/kavooce1/workspaces/" > ../data/ws.json && \
    # export TF_PROJECT=$(cat ../data/ws.json | jq '.data[0].id' | sed 's/\"//g') && \
    # curl --header "Authorization: Bearer ${{ secrets.TF_TOKEN }}" --header "Content-Type: application/vnd.api+json" "https://app.terraform.io/api/v2/workspaces/$TF_PROJECT/current-state-version?include=outputs" > ../data/outputs.json 



      
