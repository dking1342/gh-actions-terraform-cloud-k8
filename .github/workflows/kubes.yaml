name: K8 Cluster Setup

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: "Terraform Setup"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install jq

      - name: Install doctl
        run: |
          cd ~
          wget https://github.com/digitalocean/doctl/releases/download/v1.90.0/doctl-1.90.0-linux-amd64.tar.gz
          tar xf ~/doctl-1.90.0-linux-amd64.tar.gz
          sudo mv ~/doctl /usr/local/bin
          doctl version
          doctl auth init -t ${{ secrets.DO_PAT }}
          doctl account get

      - name: Install Helm
        id: helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm

      - name: Install Ansible
        id: ansible
        run: python3 -m pip install --user ansible && ansible --version

      - name: Install Kubernetes
        id: kubernetes
        run: python3 -m pip install kubernetes

      - name: Install Kubectl
        id: kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum -c
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Install Kubernetes.core
        id: kubecore
        run: ansible-galaxy collection install kubernetes.core
    
      - name: SSH setup
        run: |
          sudo mkdir -p /home/runner/.ssh
          sudo chmod 777 /home/runner/.ssh
          sudo touch /home/runner/.ssh/do_key_01
          sudo touch /home/runner/.ssh/do_key_01.pub
          sudo chmod 777 /home/runner/.ssh/do_key_01
          sudo chmod 777 /home/runner/.ssh/do_key_01.pub
          sudo echo "${{ secrets.DO_KEY_01 }}" > /home/runner/.ssh/do_key_01
          sudo echo "${{ secrets.DO_KEY_01_PUB }}" > /home/runner/.ssh/do_key_01.pub

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Terraform Init
        id: init
        run: cd terraform && rm -fr .terraform && rm -fr .terraform.lock.hcl && terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: cd terraform && terraform plan -var "do_token=${{ secrets.DO_PAT }}" -var "pvt_key=/home/runner/.ssh/do_key_01" -var "pub_key=/home/runner/.ssh/do_key_01.pub"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: cd terraform && terraform apply -auto-approve -var "do_token=${{ secrets.DO_PAT }}" -var "pvt_key=/home/runner/.ssh/do_key_01" -var "pub_key=/home/runner/.ssh/do_key_01.pub"
        continue-on-error: true

      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: exit 1

      - name: Retrieve cluster id
        id: doctl
        run: |
          cd terraform && \
          if test -f "clusterid.txt"; then 
            rm clusterid.txt
          fi && \
          terraform output | grep -Eo '\w{1,}-\w{1,}-\w{1,}-\w{1,}-\w{1,}' > clusterid.txt && \
          sed -i '1,2d' clusterid.txt && \
          export CLUSTER_ID=$(cat clusterid.txt) && \
          doctl kubernetes cluster kubeconfig save $CLUSTER_ID && \
          rm clusterid.txt

      - name: Remove any existing Helm charts
        id: charts
        run: |
          helm uninstall mongodb-exporter && \
          helm uninstall nginx-exporter && \
          helm uninstall kube-prom-stack -n monitoring && \
          helm uninstall loki -n loki-stack
        continue-on-error: true

      - name: Run Ansible Playbook
        id: playbook
        run: ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i k8s.yaml ./ansible/cluster-install.yaml -vvv        
